// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	coin "crypto-tracker/internal/model/coin"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddCoin mocks base method.
func (m *MockUseCase) AddCoin(userID int64, coin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCoin", userID, coin)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCoin indicates an expected call of AddCoin.
func (mr *MockUseCaseMockRecorder) AddCoin(userID, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCoin", reflect.TypeOf((*MockUseCase)(nil).AddCoin), userID, coin)
}

// GetCoins mocks base method.
func (m *MockUseCase) GetCoins(userID int64) ([]coin.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoins", userID)
	ret0, _ := ret[0].([]coin.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoins indicates an expected call of GetCoins.
func (mr *MockUseCaseMockRecorder) GetCoins(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoins", reflect.TypeOf((*MockUseCase)(nil).GetCoins), userID)
}

// RemoveCoin mocks base method.
func (m *MockUseCase) RemoveCoin(userID int64, coin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCoin", userID, coin)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCoin indicates an expected call of RemoveCoin.
func (mr *MockUseCaseMockRecorder) RemoveCoin(userID, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCoin", reflect.TypeOf((*MockUseCase)(nil).RemoveCoin), userID, coin)
}
