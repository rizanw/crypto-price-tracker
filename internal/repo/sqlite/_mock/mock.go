// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	coin "crypto-tracker/internal/model/coin"
	user "crypto-tracker/internal/model/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSqlite is a mock of Sqlite interface.
type MockSqlite struct {
	ctrl     *gomock.Controller
	recorder *MockSqliteMockRecorder
}

// MockSqliteMockRecorder is the mock recorder for MockSqlite.
type MockSqliteMockRecorder struct {
	mock *MockSqlite
}

// NewMockSqlite creates a new mock instance.
func NewMockSqlite(ctrl *gomock.Controller) *MockSqlite {
	mock := &MockSqlite{ctrl: ctrl}
	mock.recorder = &MockSqliteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlite) EXPECT() *MockSqliteMockRecorder {
	return m.recorder
}

// DeleteCoin mocks base method.
func (m *MockSqlite) DeleteCoin(userID int64, coin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoin", userID, coin)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCoin indicates an expected call of DeleteCoin.
func (mr *MockSqliteMockRecorder) DeleteCoin(userID, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoin", reflect.TypeOf((*MockSqlite)(nil).DeleteCoin), userID, coin)
}

// FindUser mocks base method.
func (m *MockSqlite) FindUser(email string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", email)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockSqliteMockRecorder) FindUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockSqlite)(nil).FindUser), email)
}

// GetCoins mocks base method.
func (m *MockSqlite) GetCoins(userID int64) ([]coin.CoinDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoins", userID)
	ret0, _ := ret[0].([]coin.CoinDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoins indicates an expected call of GetCoins.
func (mr *MockSqliteMockRecorder) GetCoins(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoins", reflect.TypeOf((*MockSqlite)(nil).GetCoins), userID)
}

// InsertCoin mocks base method.
func (m *MockSqlite) InsertCoin(userID int64, coin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCoin", userID, coin)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCoin indicates an expected call of InsertCoin.
func (mr *MockSqliteMockRecorder) InsertCoin(userID, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCoin", reflect.TypeOf((*MockSqlite)(nil).InsertCoin), userID, coin)
}

// InsertUser mocks base method.
func (m *MockSqlite) InsertUser(email, password string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", email, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockSqliteMockRecorder) InsertUser(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockSqlite)(nil).InsertUser), email, password)
}
